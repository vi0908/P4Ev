{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 def arithmetic_arranger(problems, second_argument = None):\
\
  if len(problems) <= 5:\
        \
    operands_1 = ''\
    operands_2 = ''\
    lines = ''\
    results = ''\
    error_sign = None\
    error_more_digits = None\
    error_digits = None\
\
    for operaciones in problems:\
      elements = operaciones.split()\
      operand_1 = elements[0]\
      operator = elements[1]\
      operand_2 = elements[2]\
\
      try:\
        \
        if int(operand_1) >= int(operand_2) and len(operand_1) <= 4:\
          \
          if operator == '+':\
            operation = str(int(operand_1) + int(operand_2))\
            operand_1 = operand_1.rjust(1,' ')\
            sign = '+ '\
            operand_2 = operand_2.rjust(len(operand_1),' ')\
            result = operation.rjust(len(operand_1)+2,' ')\
            line = '-'* (len(operand_1)+2)\
                        \
          elif operator == '-':\
            operation = str(int(operand_1) - int(operand_2))\
            operand_1 = operand_1.rjust(1,' ')\
            sign = '- '\
            operand_2 = operand_2.rjust(len(operand_1),' ')\
            result = operation.rjust(len(operand_1)+2, ' ')\
            line = '-'* (len(operand_1)+2)\
                        \
          else:\
            error_sign = True\
            break\
\
\
        elif int(operand_1) < int(operand_2) and len(operand_2) <=4 : \
    \
          if operator == '+':\
            operation = str(int(operand_1) + int(operand_2))\
            operand_2 = operand_2.rjust(1,' ')\
            sign = '+ '\
            operand_1 = operand_1.rjust(len(operand_2),' ')\
            result = operation.rjust(len(operand_2)+2, ' ')\
            line = '-'* (len(operand_2)+2)\
            expression_sum = '\\n   ' + operand_1 + '\\n + ' + operand_2 + '\\n' + line + '\\n ' + result + '\\n'\
               \
        \
          elif operator == '-':\
            operation = str(int(operand_1) - int(operand_2))\
            operand_2 = operand_2.rjust(1,' ')\
            sign = '- '\
            operand_1 = operand_1.rjust(len(operand_2),' ')\
            result = operation.rjust(len(operand_2)+2, ' ')\
            line = '-'* (len(operand_2)+2)\
            expression_sub = '\\n   ' + operand_1 + '\\n - ' + operand_2 + '\\n' + line + '\\n ' + result + '\\n'\
               \
          else:\
            error_sign = True\
            break\
                \
        else:  \
          error_more_digits = True\
          break\
\
\
        operands_1 = operands_1 + operand_1 +  '        '\
        operands_2 = operands_2 + sign +  operand_2 + '      '\
        lines = lines + line + '      '\
        results = results + result + '      '  \
\
      except:\
          error_digits = True\
\
\
\
    if second_argument == None:\
            arranged_problems = '\\n    ' + operands_1 + '\\n  ' + operands_2 + '\\n  ' + lines + '\\n  '\
\
    elif error_sign == True:\
            arranged_problems = "\\nError: Operator must be '+' or '-'. \\n"\
        \
    elif error_more_digits == True:\
            arranged_problems ='\\nError: Numbers cannot be more than four digits.\\n'\
\
    elif error_digits == True:\
            arranged_problems = '\\nError: Numbers must only contain digits.\\n'\
    \
    else:\
            arranged_problems = '\\n    ' + operands_1 + '\\n  ' + operands_2 + '\\n  ' + lines + '\\n  ' + results + '\\n'\
\
  else:\
    arranged_problems = '\\nError: Too many problems.\\n'\
  \
  return arranged_problems\
\
print(arithmetic_arranger(["32 + 698", "3801 - 2", "45 + 43", "123 + 49"]))}